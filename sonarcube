Code Quality check tool

#SonarQube ------------------other tools (veracode, coverity, codescence)

SonarQube is a very popular code quality management tool that is used widely for code analysis to identify code smells, possible bugs, and performance enhancements. SonarQube supports many popular programming languages like Java, JavaScript, C#, Python, Kotlin, Scala etc. It also provides test and code coverage.

SonarQube is a web-based platform used for continuous inspection of code quality. It performs automatic reviews with static analysis of code to detect bugs, code smells, and security vulnerabilities in over 25 programming languages.

Benefits:
Improve quality.
Grow developer skills.
Continuous quality management.
Reduce risk(vulnerabilities).
Scale with ease.
Code quality and smell

code smell : A maintainability issue that makes your code confusing and difficult to maintain.

Code vulnerabilities: Code vulnerabilities are software flaws that open opportunities for potential application misuse, exploits, or breaches that result in sensitive information disclosure, data leaks, ransomware attacks, and other cyber security issues.
-----------------

three components 
------>SonarQube server 

----->rules --apply rules on code 

--default data base embedded H2 database 

if required we can configure database additionally for more configuration PostgreSql

------>scanner 
gather rules 
scan the source code  
send the reports to database  




STEUP:

required 4gb ram and 2 cpu's
dependency: java11 or 17
req: t2.medium
port: 9000

#Launch an t2.medium instance with allow port 9000 

sudo yum install java-17-amazon-corretto.x86_64
cd /opt/ #switch to opt directory
sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.9.6.50800.zip
sudo unzip sonarqube-8.9.6.50800.zip

#sonarqube has to run with user only 
sudo useradd sonar
sudo chown sonar:sonar sonarqube-8.9.6.50800 -R
sudo chmod 777 sonarqube-8.9.6.50800 -R

passwd sonar (create password)
su - sonar (log in as sonar)

#run this on server manually
sh /opt/sonarqube-8.9.6.50800/bin/linux-x86-64/sonar.sh start
sh /opt/sonarqube-8.9.6.50800/bin/linux-x86-64/sonar.sh status
 
to start ----- sh sonar.sh start or ./sonar.sh start
to check status ----- sh sonar.sh status

#to access 
public-ip:9000
user=admin & password=admin

note : after login we need to change our existing password to custom password 
---------------------------------------------------------------------



sonarQube on Docker 

docker run -d --name sonar -p 9000:9000 sonarqube:lts-community
--------------------------------------------------------------------


mvn sonar:sonar   -Dsonar.projectKey=mvn   -Dsonar.host.url=http://54.147.31.188:9000   -Dsonar.login=db3ae30dfc5f777dec3ed2e3ffc31d7ccdbaccef



###### ----------configure with jenkins-------------------------#####

prerequistes :

create token in sonarqube ---->after login go to adminstration---security--user--create token




step-1

--Required plugins--

SonarQube scanner for Jenkins

quality gates if required (optional)

step-2 

go to credential and select text mode paste you token and give name 

go to system configurations paste url and select key and give name ex: 'SonarQube'  (note: this name only we have to call like withSonarQubeEnv('SonarQube'))


step-3

create Jenkins job and paste below script maven and sonar 


passing with environment variables without hardcoded values (sonar url and token)

pipeline {
    agent any

    stages {
        stage('scm') {
            steps {
                git branch: 'main', url: 'https://github.com/nareshdevopscloud/project-1-maven-jenkins-CICD-docker-eks-.git'
            }
        }
        stage('clean') {
            steps {
                sh 'mvn clean'
                           
            }
        }
        stage('code quality') {
            steps {
                withSonarQubeEnv('SonarQube'){    
                sh 'mvn install sonar:sonar'
               
            }
        }
        }
    }
}

#### why sonar has to run as a sonar user instead of root?
Security: Running SonarQube as a non-root user like sonar limits the potential damage from security vulnerabilities. If a security flaw is exploited, the attacker gains access only with the limited permissions of the sonar user, not root access, which can modify the entire system.

Separation of Concerns: Using a dedicated user helps separate SonarQube's processes and files from other applications on the system. This separation makes it easier to manage, secure, and audit.



##### Sample Exercise :
Understand the Sample Code
In the provided App.java code:

#java code #
-------------------------------
package com.example;

/**
 * Sample application to demonstrate code duplication.
 */
public class App {

    private static final String MESSAGE = "Hello World!";

    public App() {}

    public static void main(String[] args) {
        System.out.println(MESSAGE);
        System.out.println(MESSAGE); // Duplicate line
    }

    public String getMessage() {
        return MESSAGE;
    }

    public String getMessage() {
        return MESSAGE; // Duplicate method
    }
}
There are 2 duplicated lines in the main method.
There are 2 identical getMessage methods.
2. Calculate the Duplication Percentage
To set a Quality Gate that will fail for this code, calculate the duplication percentage.

Assumptions:

Total lines of code (LOC): 17 (including empty lines and comments).
Duplicated lines: 5 (2 lines of System.out.println(MESSAGE);, and 2 getMessage methods + 1 duplicated method declaration).
Duplication Percentage Calculation:

plaintext

Duplicated Lines (%) = (Duplicated Lines / Total Lines) * 100
                      = (5 / 17) * 100
                      = 29.41%
3. Configure Quality Gate in SonarQube
To ensure that the Quality Gate fails for this level of duplication, configure your Quality Gate as follows:

Log in to SonarQube Console.

Navigate to Quality Gates:

Go to Quality Gates in the SonarQube dashboard.
Click on the Create button to create a new Quality Gate, or edit an existing one.
Add a Condition for Duplications:

Click Add Condition.
Set the Metric to Duplicated Lines %.
Set the Operator to is greater than.
Set the Value to 1 (or a value lower than the percentage you want to fail at, like 1% to fail for anything above 1%).
Example configuration:

Metric: Duplicated Lines %
Operator: is greater than
Value: 1
Save the Quality Gate:

After adding the condition, save the Quality Gate configuration.
4. Run the SonarQube Analysis
After configuring the Quality Gate:

Run the Analysis:
Execute the Maven command to analyze your project with SonarQube:


mvn clean verify sonar:sonar -Dsonar.projectKey=sample-java-project -Dsonar.host.url=http://localhost:9000 -Dsonar.login=<your-sonar-token>
Check the Results:

Go to the SonarQube dashboard.
Navigate to your project.
Check the Quality Gate status to see if it failed due to duplication.
By setting the threshold to 1%, the provided code should cause the Quality Gate to fail due to the duplication being significantly above this threshold. Adjust the threshold value as needed based on your project requirements.




Sonar Scanner 

SonarScanner is a command-line tool that runs on a developer's machine or CI server to analyze project source code and send the results to the SonarQube server.
##------------------------------------##
Step 1: Download and Install SonarScanner
On Linux/MacOS:
Download SonarScanner:

--------------------------------- other programming languages process------------------------------------

wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
Unzip the downloaded file:



unzip sonar-scanner-cli-4.8.0.2856-linux.zip
Move the unzipped folder to /opt or any preferred location:


sudo mv sonar-scanner-4.8.0.2856-linux /opt/sonar-scanner
Set up environment variables:
Add the following lines to your .bashrc, .zshrc, or .profile file:


export PATH=$PATH:/opt/sonar-scanner/bin
Source the file to update your PATH:


source ~/.bashrc  # or source ~/.zshrc or source ~/.profile
Verify the installation:


sonar-scanner --version

Ex:

sonar-scanner \
  -Dsonar.projectKey=python1 \
  -Dsonar.sources=. \
  -Dsonar.host.url=http://43.204.112.71:9000 \
  -Dsonar.login=token


